apply plugin: 'com.android.application'
apply plugin: 'org.greenrobot.greendao'

final boolean isRelease = false;
loadExtProperties(isRelease)

android {
    compileSdkVersion 26
    buildToolsVersion "26.0.0"
    defaultConfig {
        applicationId "io.whz.synapse"
        minSdkVersion 21
        targetSdkVersion 26
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [eventBusIndex: 'io.whz.synapse.EventBusIndex']
            }
        }

        buildConfigField "boolean", "TRACK_ENABLE", "$isRelease"
        buildConfigField "String", "AMPLITUDE_ID", "\"$gradle.AMPLITUDE_ID\""
    }

    buildTypes {
        debug {
            applicationIdSuffix ".debug"
        }

        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

greendao {
    schemaVersion 1
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])

    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile 'com.android.support:appcompat-v7:26.0.2'
    compile 'com.android.support:design:26.0.2'
    compile 'com.android.support:cardview-v7:26.0.2'
    compile 'me.drakeet.multitype:multitype:3.3.0'
    compile 'org.greenrobot:greendao:3.2.2'
    compile 'org.greenrobot:eventbus:3.0.0'
    compile 'com.github.PhilJay:MPAndroidChart:v3.0.2'
    compile 'com.google.firebase:firebase-core:11.4.2'
    compile 'com.amplitude:android-sdk:2.15.0'

    debugCompile 'com.jakewharton.scalpel:scalpel:1.1.2'
    debugCompile 'com.squareup.leakcanary:leakcanary-android:1.5.4'

    testCompile 'junit:junit:4.12'
    annotationProcessor 'org.greenrobot:eventbus-annotation-processor:3.0.1'
}

if (isRelease) {
    println("Import google services plugin")
    apply plugin: 'com.google.gms.google-services'
}

def loadExtProperties(isRelease) {
    final File file = new File(projectDir.absolutePath,
            isRelease ? "release.properties" : "debug.properties");

    if (!file.exists()) {
        return;
    }

    final Properties prop = new Properties()
    prop.load(file.newDataInputStream())

    for (String key : prop.keySet()) {
        gradle.ext."$key" = prop.get(key)
    }
}
